{"name":"AD9850SPI","tagline":"AD9850 SPI library for arduino","body":"# Arduino SPI library for AD9850 #\r\nF4GOJ Christophe f4goj@free.fr\r\n\r\nAugust 2014\r\n\r\nUpgrade to SPI F4GOH Anthony f4goh@orange.fr\r\n\r\nThis library uses the Serial Peripheral Interface (SPI) to accelerate the update of the AD9850 from 700µs in software serial to 90µs (54µs for the deltaphase calculation and 36µs for the transfert)\r\n\r\nAD9850 datasheet at http://www.analog.com/static/imported-files/data_sheets/AD9850.pdf\r\n\r\nUse this library freely.\r\n\r\n## Installation ##\r\nTo use the **AD9850SPI** library:  \r\n- Go to https://github.com/F4GOJ/AD9850SPI, click the [Download ZIP](https://github.com/F4GOJ/AD9850SPI/archive/master.zip) button and save the ZIP file to a convenient location on your PC.\r\n- Uncompress the downloaded file.  This will result in a folder containing all the files for the library, that has a name that includes the branch name, usually **AD9850SPI-master**.\r\n- Rename the folder to  **AD9850SPI**.\r\n- Copy the renamed folder to the Arduino sketchbook\\libraries folder.\r\n\r\n\r\n## Usage notes ##\r\n\r\nThe **AD9850SPI** library instantiates a **DDS** object, the user does not need to do this.\r\n\r\nTo use the **AD9850SPI** library, the SPI library must also be included.\r\n\r\n```c++\r\n#include <AD9850SPI.h>    //http://github.com/F4GOJ/AD9850SPI\r\n#include <SPI.h>          //http://arduino.cc/en/Reference/SPI (included with Arduino IDE)\r\n```\r\n## Hardware connections : ##\r\n\r\n- W_CLK -> D13 arduino UNO/NANO, D52 MEGA\r\n- FQ_UD -> any pin except 10 and 12 UNO/NANO, 50 and 53 MEGA\r\n- DATA/D7 -> D11 arduino UNO/NANO, D51 MEGA\r\n- RESET -> any pin except 10 and 12 UNO/NANO, 50 and 53 MEGA\r\n\r\n## Functions : ##\r\n\r\n###begin(int w_clk_pin, int fq_ud_pin, int reset_pin)\r\n#####Description\r\nInitialize the output pins and master reset the AD9850\r\n#####Syntax\r\n`DDS.begin(w_clk, fq_ud, reset);`\r\n#####Parameters\r\n**w_clk :** MOSI output pin (13 on a UNO/NANO, 52 on a MEGA) *(int)*<br>\r\n**fq_ud :** Frequency update pin, any pin except 10 and 12 UNO/NANO, 50 and 53 MEGA. *(int)*<br>\r\n**reset :** Reset output pin, any pin except 10 and 12 UNO/NANO, 50 and 53 MEGA. *(int)*\r\n#####Returns\r\nNone.\r\n#####Example\r\n```c++\r\nvoid setup(){\r\n DDS.begin(13, 8, 9);\r\n}\r\n```\r\n###calibrate(double trim_frequency)\r\n#####Description\r\nCompensation of crystal oscillator frequency.<br>\r\nCan be used at any time after initialization.\r\n#####Syntax\r\n`DDS.calibrate(trim_freq);`\r\n#####Parameters\r\n**trim_freq :** Adjust around 125000000 to match the real crystal oscillator frequency. *(double)*\r\n#####Returns\r\nNone.\r\n#####Example\r\n```c++\r\nvoid setup(){\r\n DDS.begin(13, 8, 9);\r\n}\r\n\r\nvoid loop(){\r\n DDS.calibrate(124999000);\r\n}\r\n```\r\n###setfreq(double frequency, int phase)\r\n#####Description\r\nSets the output frequency of the AD9850 and the phase of the signal.\r\n#####Syntax\r\n`DDS.setfreq(frequency, phase);`\r\n#####Parameters\r\n**frequency :** Output frequency in Hz. *(double)*<br>\r\n**phase :** Sets the phase of the output signal, coded on 5 bits allows 32 phase steps of 11,25° each. *(int)*\r\n#####Returns\r\nNone.\r\n#####Example\r\n```c++\r\ndouble frequency = 10000000;\r\nint phase = 0;\r\nDDS.setfreq(frequency, phase);\r\n```\r\n###down()\r\n#####Description\r\nPower down mode reducing the dissipated power from 380mW to 30mW @5V\r\n#####Syntax\r\n`DDS.down();`\r\n#####Parameters\r\nNone.\r\n#####Returns\r\nNone.\r\n#####Example\r\n```c++\r\nDDS.down();\r\n```\r\n###up()\r\n#####Description\r\nWakes-up the AD9850 from power down mode.\r\n#####Syntax\r\n`DDS.up();`\r\n#####Parameters\r\nNone.\r\n#####Returns\r\nNone.\r\n#####Example\r\n```c++\r\nDDS.down(); // Entering power down mode\r\n\r\n// some code doing something\r\n\r\n...\r\n\r\nDDS.up(); // WAKE-UP !!! :)\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}